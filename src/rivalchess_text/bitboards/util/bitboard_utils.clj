(ns rivalchess-text.bitboards.util.bitboard_utils)

(defn orWithURightShiftedSelf [x y] (bit-or x (unsigned-bit-shift-right x y)))
(defn orWithLeftShiftedSelf [x y] (bit-or x (bit-shift-left x y)))
(defn southFill [x] (orWithURightShiftedSelf (orWithURightShiftedSelf (orWithURightShiftedSelf x 8) 16) 32))
(defn northFill [x] (orWithLeftShiftedSelf (orWithLeftShiftedSelf (orWithLeftShiftedSelf x 8) 16) 32))
(defn everyEighthBitFrom [x] (if (< x 8) (bit-shift-left 1 x) (bit-or (bit-shift-left 1 x) (everyEighthBitFrom (- x 8)))))
(defn setBits [x] (if (empty? x) 0 (bit-or (bit-shift-left 1 (last x)) (setBits (pop x)))))

(def A1 7)
(def B1 6)
(def C1 5)
(def D1 4)
(def E1 3)
(def F1 2)
(def G1 1)
(def H1 0)

(def A2 (+ A1 8))
(def B2 (+ B1 8))
(def C2 (+ C1 8))
(def D2 (+ D1 8))
(def E2 (+ E1 8))
(def F2 (+ F1 8))
(def G2 (+ G1 8))
(def H2 (+ H1 8))

(def A3 (+ A2 8))
(def B3 (+ B2 8))
(def C3 (+ C2 8))
(def D3 (+ D2 8))
(def E3 (+ E2 8))
(def F3 (+ F2 8))
(def G3 (+ G2 8))
(def H3 (+ H2 8))

(def A4 (+ A3 8))
(def B4 (+ B3 8))
(def C4 (+ C3 8))
(def D4 (+ D3 8))
(def E4 (+ E3 8))
(def F4 (+ F3 8))
(def G4 (+ G3 8))
(def H4 (+ H3 8))

(def A5 (+ A4 8))
(def B5 (+ B4 8))
(def C5 (+ C4 8))
(def D5 (+ D4 8))
(def E5 (+ E4 8))
(def F5 (+ F4 8))
(def G5 (+ G4 8))
(def H5 (+ H4 8))

(def A6 (+ A5 8))
(def B6 (+ B5 8))
(def C6 (+ C5 8))
(def D6 (+ D5 8))
(def E6 (+ E5 8))
(def F6 (+ F5 8))
(def G6 (+ G5 8))
(def H6 (+ H5 8))

(def A7 (+ A6 8))
(def B7 (+ B6 8))
(def C7 (+ C6 8))
(def D7 (+ D6 8))
(def E7 (+ E6 8))
(def F7 (+ F6 8))
(def G7 (+ G6 8))
(def H7 (+ H6 8))

(def A8 (+ A7 8))
(def B8 (+ B7 8))
(def C8 (+ C7 8))
(def D8 (+ D7 8))
(def E8 (+ E7 8))
(def F8 (+ F7 8))
(def G8 (+ G7 8))
(def H8 (+ H7 8))

(def RANK_1 (setBits [0 1 2 3 4 5 6 7]))
(def RANK_2 (bit-shift-left RANK_1 8))
(def RANK_3 (bit-shift-left RANK_2 8))
(def RANK_4 (bit-shift-left RANK_3 8))
(def RANK_5 (bit-shift-left RANK_4 8))
(def RANK_6 (bit-shift-left RANK_5 8))
(def RANK_7 (bit-shift-left RANK_6 8))
(def RANK_8 (bit-shift-left RANK_7 8))

(def FILE_A (everyEighthBitFrom A8))
(def FILE_B (everyEighthBitFrom B8))
(def FILE_C (everyEighthBitFrom C8))
(def FILE_D (everyEighthBitFrom D8))
(def FILE_E (everyEighthBitFrom E8))
(def FILE_F (everyEighthBitFrom F8))
(def FILE_G (everyEighthBitFrom G8))
(def FILE_H (everyEighthBitFrom H8))

(def MIDDLE_FILES_8_BIT (setBits [D1 E1]))
(def NONMID_FILES_8_BIT (setBits [A1 B1 C1 F1 G1 H1]))

(def F1G1 (setBits [F1 G1]))
(def G1H1 (setBits [G1 H1]))
(def A1B1 (setBits [A1 B1]))
(def B1C1 (setBits [B1 C1]))
(def F8G8 (setBits [F8 G8]))
(def G8H8 (setBits [G8 H8]))
(def A8B8 (setBits [A8 B8]))
(def B8C8 (setBits [B8 C8]))

(def FILES [FILE_H FILE_G FILE_F FILE_E FILE_D FILE_C FILE_B FILE_A])

(def DARK_SQUARES (setBits [A1 A3 A5 A7 B2 B4 B6 B8 C1 C3 C5 C7 D2 D4 D6 D8 E1 E3 E5 E7 F2 F4 F6 F8 G1 G3 G5 G7 H2 H4 H6 H8]))
(def LIGHT_SQUARES (setBits [A2 A4 A6 A8 B1 B3 B5 B7 C2 C4 C6 C8 D1 D3 D5 D7 E2 E4 E6 E8 F1 F3 F5 F7 G2 G4 G6 G8 H1 H3 H5 H7]))

(def LOW32 (bit-or RANK_1 RANK_2 RANK_3 RANK_4))

(def WHITEKINGSIDECASTLESQUARES (setBits [F1 G1]))
(def WHITEQUEENSIDECASTLESQUARES (setBits [B1 C1 D1]))
(def BLACKKINGSIDECASTLESQUARES (setBits [F8 G8]))
(def BLACKQUEENSIDECASTLESQUARES (setBits [B8 C8 D8]))

(def WHITEKINGSIDECASTLEMOVEMASK (setBits [E1 G1]))
(def WHITEQUEENSIDECASTLEMOVEMASK (setBits [E1 C1]))
(def BLACKKINGSIDECASTLEMOVEMASK (setBits [E8 G8]))
(def BLACKQUEENSIDECASTLEMOVEMASK (setBits [E8 C8]))

(def WHITEKINGSIDECASTLEROOKMOVE (setBits [H1 F1]))
(def WHITEQUEENSIDECASTLEROOKMOVE (setBits [A1 D1]))
(def BLACKKINGSIDECASTLEROOKMOVE (setBits [H8 F8]))
(def BLACKQUEENSIDECASTLEROOKMOVE (setBits [A8 D8]))

(def WHITEKINGSIDEROOKMASK (setBits [H1]))
(def WHITEQUEENSIDEROOKMASK (setBits [A1]))
(def BLACKKINGSIDEROOKMASK (setBits [H8]))
(def BLACKQUEENSIDEROOKMASK (setBits [A8]))

(def DISTANCE_TO_H1_OR_A8 [0, 1, 2, 3, 4, 5, 6, 7,
                           1, 2, 3, 4, 5, 6, 7, 6,
                           2, 3, 4, 5, 6, 7, 6, 5,
                           3, 4, 5, 6, 7, 6, 5, 4,
                           4, 5, 6, 7, 6, 5, 4, 3,
                           5, 6, 7, 6, 5, 4, 3, 2,
                           6, 7, 6, 5, 4, 3, 2, 1,
                           7, 6, 5, 4, 3, 2, 1, 0])

(def KNIGHT_MOVES [0x20400,
                   0x50800, 0xa1100, 0x142200, 0x284400, 0x508800, 0xa01000, 0x402000, 0x2040004,
                   0x5080008, 0xa110011, 0x14220022, 0x28440044, 0x50880088, 0xa0100010, 0x40200020, 0x204000402,
                   0x508000805, 0xa1100110a, 0x1422002214, 0x2844004428, 0x5088008850, 0xa0100010a0, 0x4020002040, 0x20400040200,
                   0x50800080500, 0xa1100110a00, 0x142200221400, 0x284400442800, 0x508800885000, 0xa0100010a000, 0x402000204000, 0x2040004020000,
                   0x5080008050000, 0xa1100110a0000, 0x14220022140000, 0x28440044280000, 0x50880088500000, 0xa0100010a00000, 0x40200020400000, 0x204000402000000,
                   0x508000805000000, 0xa1100110a000000, 0x1422002214000000, 0x2844004428000000, 0x5088008850000000, -0x5fefffef60000000, 0x4020002040000000, 0x400040200000000,
                   0x800080500000000, 0x1100110a00000000, 0x2200221400000000, 0x4400442800000000, -0x77ff77b000000000, 0x100010a000000000, 0x2000204000000000, 0x4020000000000,
                   0x8050000000000, 0x110a0000000000, 0x22140000000000, 0x44280000000000, 0x88500000000000, 0x10a00000000000, 0x20400000000000])

(def KING_MOVES [
                0x302,
                0x705, 0xe0a, 0x1c14, 0x3828, 0x7050, 0xe0a0, 0xc040, 0x30203,
                0x70507, 0xe0a0e, 0x1c141c, 0x382838, 0x705070, 0xe0a0e0, 0xc040c0, 0x3020300,
                0x7050700, 0xe0a0e00, 0x1c141c00, 0x38283800, 0x70507000, 0xe0a0e000, 0xc040c000, 0x302030000,
                0x705070000, 0xe0a0e0000, 0x1c141c0000, 0x3828380000, 0x7050700000, 0xe0a0e00000, 0xc040c00000, 0x30203000000,
                0x70507000000, 0xe0a0e000000, 0x1c141c000000, 0x382838000000, 0x705070000000, 0xe0a0e0000000, 0xc040c0000000, 0x3020300000000,
                0x7050700000000, 0xe0a0e00000000, 0x1c141c00000000, 0x38283800000000, 0x70507000000000, 0xe0a0e000000000, 0xc040c000000000, 0x302030000000000,
                0x705070000000000, 0xe0a0e0000000000, 0x1c141c0000000000, 0x3828380000000000, 0x7050700000000000, -0x1f5f200000000000, -0x3fbf400000000000, 0x203000000000000,
                0x507000000000000, 0xa0e000000000000, 0x141c000000000000, 0x2838000000000000, 0x5070000000000000, -0x5f20000000000000, 0x40c0000000000000])

(def whiteKingDangerZone [
                          197378,460549,921098,1842196,3684392,7368784,14737568,12632128,
                          50529027,117901063,235802126,471604252,943208504,1886417008,3772834016,3233857728,
                          12935430912,30182672128,60365344256,120730688512,241461377024,482922754048,965845508096,827867578368,
                          3311470313472,7726764064768,15453528129536,30907056259072,61814112518144,123628225036288,247256450072576,211934100062208,
                          847736400248832,1978051600580608,3956103201161216,7912206402322432,15824412804644864,31648825609289728,63297651218579456,54255129615925248,
                          217020518463700992,506381209748635648,1012762419497271296,2025524838994542592,4051049677989085184,8102099355978170368,-2242545361753210880,-4557430892032688128,
                          217020505578799104,506381179683864576,1012762359367729152,2025524718735458304,4051049437470916608,8102098874941833216,-2242546323825885184,-4557431716666408960,
                          217017207043915776,506373483102470144,1012746966204940288,2025493932409880576,4050987864819761152,8101975729639522304,-2242792614430507008,-4557642822898941952
                          ])

(def blackKingDangerZone [
                          771,1799,3598,7196,14392,28784,57568,49344,
                          197379,460551,921102,1842204,3684408,7368816,14737632,12632256,
                          50529027,117901063,235802126,471604252,943208504,1886417008,3772834016,3233857728,
                          12935430912,30182672128,60365344256,120730688512,241461377024,482922754048,965845508096,827867578368,
                          3311470313472,7726764064768,15453528129536,30907056259072,61814112518144,123628225036288,247256450072576,211934100062208,
                          847736400248832,1978051600580608,3956103201161216,7912206402322432,15824412804644864,31648825609289728,63297651218579456,54255129615925248,
                          217020518463700992,506381209748635648,1012762419497271296,2025524838994542592,4051049677989085184,8102099355978170368,-2242545361753210880,-4557430892032688128,
                          144962911540871168,362265991608008704,724531983216017408,1449063966432034816,2898127932864069632,5796255865728139264,-6854232342253273088,4665940320188366848
                          ])

(def whitePawnMovesForward [0x100, 0x200, 0x400, 0x800, 0x1000, 0x2000, 0x4000, 0x8000,
                            0x10000, 0x20000, 0x40000, 0x80000, 0x100000, 0x200000, 0x400000, 0x800000,
                            0x1000000, 0x2000000, 0x4000000, 0x8000000, 0x10000000, 0x20000000, 0x40000000, 0x80000000,
                            0x100000000, 0x200000000, 0x400000000, 0x800000000, 0x1000000000, 0x2000000000, 0x4000000000, 0x8000000000,
                            0x10000000000, 0x20000000000, 0x40000000000, 0x80000000000, 0x100000000000, 0x200000000000, 0x400000000000, 0x800000000000,
                            0x1000000000000, 0x2000000000000, 0x4000000000000, 0x8000000000000, 0x10000000000000, 0x20000000000000, 0x40000000000000, 0x80000000000000,
                            0x100000000000000, 0x200000000000000, 0x400000000000000, 0x800000000000000, 0x1000000000000000, 0x2000000000000000, 0x4000000000000000, (bit-shift-left 1 63),
                            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0])

(def whitePawnMovesCapture [
                            0x200, 0x500, 0xa00, 0x1400, 0x2800, 0x5000, 0xa000, 0x4000,
                            0x20000, 0x50000, 0xa0000, 0x140000, 0x280000, 0x500000, 0xa00000, 0x400000,
                            0x2000000, 0x5000000, 0xa000000, 0x14000000, 0x28000000, 0x50000000, 0xa0000000, 0x40000000,
                            0x200000000, 0x500000000, 0xa00000000, 0x1400000000, 0x2800000000, 0x5000000000, 0xa000000000, 0x4000000000,
                            0x20000000000, 0x50000000000, 0xa0000000000, 0x140000000000, 0x280000000000, 0x500000000000, 0xa00000000000, 0x400000000000,
                            0x2000000000000, 0x5000000000000, 0xa000000000000, 0x14000000000000, 0x28000000000000, 0x50000000000000, 0xa0000000000000, 0x40000000000000,
                            0x200000000000000, 0x500000000000000, 0xa00000000000000, 0x1400000000000000, 0x2800000000000000, 0x5000000000000000, -0x6000000000000000, 0x4000000000000000,
                            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0])

(def blackPawnMovesForward [
                            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
                            0x1, 0x2, 0x4, 0x8, 0x10, 0x20, 0x40, 0x80,
                            0x100, 0x200, 0x400, 0x800, 0x1000, 0x2000, 0x4000, 0x8000,
                            0x10000, 0x20000, 0x40000, 0x80000, 0x100000, 0x200000, 0x400000, 0x800000,
                            0x1000000, 0x2000000, 0x4000000, 0x8000000, 0x10000000, 0x20000000, 0x40000000, 0x80000000,
                            0x100000000, 0x200000000, 0x400000000, 0x800000000, 0x1000000000, 0x2000000000, 0x4000000000, 0x8000000000,
                            0x10000000000, 0x20000000000, 0x40000000000, 0x80000000000, 0x100000000000, 0x200000000000, 0x400000000000, 0x800000000000,
                            0x1000000000000, 0x2000000000000, 0x4000000000000, 0x8000000000000, 0x10000000000000, 0x20000000000000, 0x40000000000000, 0x80000000000000])

(def blackPawnMovesCapture [
                            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
                            0x2, 0x5, 0xa, 0x14, 0x28, 0x50, 0xa0, 0x40,
                            0x200, 0x500, 0xa00, 0x1400, 0x2800, 0x5000, 0xa000, 0x4000,
                            0x20000, 0x50000, 0xa0000, 0x140000, 0x280000, 0x500000, 0xa00000, 0x400000,
                            0x2000000, 0x5000000, 0xa000000, 0x14000000, 0x28000000, 0x50000000, 0xa0000000, 0x40000000,
                            0x200000000, 0x500000000, 0xa00000000, 0x1400000000, 0x2800000000, 0x5000000000, 0xa000000000, 0x4000000000,
                            0x20000000000, 0x50000000000, 0xa0000000000, 0x140000000000, 0x280000000000, 0x500000000000, 0xa00000000000, 0x400000000000,
                            0x2000000000000, 0x5000000000000, 0xa000000000000, 0x14000000000000, 0x28000000000000, 0x50000000000000, 0xa0000000000000, 0x40000000000000])

(def whitePassedPawnMask [
                          0, 0, 0, 0, 0, 0, 0, 0,
                          0x0003030303030000, 0x0007070707070000, 0x000E0E0E0E0E0000, 0x001C1C1C1C1C0000, 0x0038383838380000, 0x0070707070700000, 0x00E0E0E0E0E00000, 0x00C0C0C0C0C00000,
                          0x0003030303000000, 0x0007070707000000, 0x000E0E0E0E000000, 0x001C1C1C1C000000, 0x0038383838000000, 0x0070707070000000, 0x00E0E0E0E0000000, 0x00C0C0C0C0000000,
                          0x0003030300000000, 0x0007070700000000, 0x000E0E0E00000000, 0x001C1C1C00000000, 0x0038383800000000, 0x0070707000000000, 0x00E0E0E000000000, 0x00C0C0C000000000,
                          0x0003030000000000, 0x0007070000000000, 0x000E0E0000000000, 0x001C1C0000000000, 0x0038380000000000, 0x0070700000000000, 0x00E0E00000000000, 0x00C0C00000000000,
                          0x0003000000000000, 0x0007000000000000, 0x000E000000000000, 0x001C000000000000, 0x0038000000000000, 0x0070000000000000, 0x00E0000000000000, 0x00C0000000000000,
                          0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0])

(def backPassedPawnMask [
                         0, 0, 0, 0, 0, 0, 0, 0,
                         0, 0, 0, 0, 0, 0, 0, 0,
                         0x0000000000000300, 0x0000000000000700, 0x0000000000000E00, 0x0000000000001C00, 0x0000000000003800, 0x0000000000007000, 0x000000000000E000, 0x000000000000C000,
                         0x0000000000030300, 0x0000000000070700, 0x00000000000E0E00, 0x00000000001C1C00, 0x0000000000383800, 0x0000000000707000, 0x0000000000E0E000, 0x0000000000C0C000,
                         0x0000000003030300, 0x0000000007070700, 0x000000000E0E0E00, 0x000000001C1C1C00, 0x0000000038383800, 0x0000000070707000, 0x00000000E0E0E000, 0x00000000C0C0C000,
                         0x0000000303030300, 0x0000000707070700, 0x0000000E0E0E0E00, 0x0000001C1C1C1C00, 0x0000003838383800, 0x0000007070707000, 0x000000E0E0E0E000, 0x000000C0C0C0C000,
                         0x0000030303030300, 0x0000070707070700, 0x00000E0E0E0E0E00, 0x00001C1C1C1C1C00, 0x0000383838383800, 0x0000707070707000, 0x0000E0E0E0E0E000, 0x0000C0C0C0C0C000,
                         0, 0, 0, 0, 0, 0, 0, 0])

(def WHITE_KING_SHIELD_MASK [(setBits [9 8]) (setBits [10 9 8]) (setBits [11 10 9]) (setBits [12 11 10]) (setBits [13 12 11]) (setBits [14 13 12]) (setBits [15 14 13]) (setBits [15 14])])

(def bitFlippedHorizontalAxis [56, 57, 58, 59, 60, 61, 62, 63, 48, 49, 50, 51, 52, 53, 54, 55, 40, 41, 42, 43, 44, 45, 46, 47, 32, 33, 34, 35, 36, 37, 38, 39, 24, 25, 26, 27, 28, 29, 30, 31, 16, 17, 18, 19, 20, 21, 22, 23, 8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7])

(defn getPawnMovesCaptureOfColour [colour] (if (= colour :white) whitePawnMovesCapture blackPawnMovesCapture))
