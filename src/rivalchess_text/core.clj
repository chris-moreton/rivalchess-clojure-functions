(ns rivalchess-text.core)

(defn orWithURightShiftedSelf [x y] (bit-or x (unsigned-bit-shift-right x y)))
(defn orWithLeftShiftedSelf [x y] (bit-or x (bit-shift-left x y)))
(defn southFill [x] (orWithURightShiftedSelf (orWithURightShiftedSelf (orWithURightShiftedSelf x 8) 16) 32))
(defn northFill [x] (orWithLeftShiftedSelf (orWithLeftShiftedSelf (orWithLeftShiftedSelf x 8) 16) 32))
(defn everyEighthBitFrom [x] (if (< x 8) (bit-shift-left 1 x) (bit-or (bit-shift-left 1 x) (everyEighthBitFrom (- x 8)))))
(defn setBits [x] (if (empty? x) 0 (bit-or (bit-shift-left 1 (last x)) (setBits (pop x)))))

(def RANK_1 255)
(def RANK_2 (bit-shift-left RANK_1 8))
(def RANK_3 (bit-shift-left RANK_2 8))
(def RANK_4 (bit-shift-left RANK_3 8))
(def RANK_5 (bit-shift-left RANK_4 8))
(def RANK_6 (bit-shift-left RANK_5 8))
(def RANK_7 (bit-shift-left RANK_6 8))
(def RANK_8 (bit-shift-left RANK_7 8))

(def FILE_A (everyEighthBitFrom 63))
(def FILE_B (everyEighthBitFrom 62))
(def FILE_C (everyEighthBitFrom 61))
(def FILE_D (everyEighthBitFrom 60))
(def FILE_E (everyEighthBitFrom 59))
(def FILE_F (everyEighthBitFrom 58))
(def FILE_G (everyEighthBitFrom 57))
(def FILE_H (everyEighthBitFrom 56))

(def MIDDLE_FILES_8_BIT (setBits [3,4]))
(def NONMID_FILES_8_BIT (setBits [0,1,2,5,6,7]))
